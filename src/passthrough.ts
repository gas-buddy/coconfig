import fs from 'fs';
import path from 'path';
import type { CoConfigEnvironment } from './types/index';

const packageJson = JSON.parse(fs.readFileSync(path.resolve(__dirname, '../package.json'), 'utf8'));

const header = `/**
 * This file is generated by coconfig. Do not edit it directly.
 * Instead, edit the coconfig.js or coconfig.ts file in your project root.
 *
 * See https://github.com/gas-buddy/coconfig for more information.
 * @version coconfig@${packageJson.version}
 */`;

export const headerMarker = 'This file is generated by coconfig. Do not edit it directly';

function configReference(pathOrModule: string, packagePath: string) {
  if (fs.existsSync(pathOrModule)) {
    return `./${path.relative(path.dirname(packagePath), pathOrModule)}`;
  }
  // Else it's a node module
  return pathOrModule;
}

function getModulePath(configRef: string) {
  // cjs needs full path
  if (configRef.startsWith('./') && path.extname(configRef).length === 3) {
    return configRef.substring(0, configRef.length - path.extname(configRef).length);
  }
  return configRef;
}

export function getFile(
  env: CoConfigEnvironment,
  key: string,
  filename: string,
) {
  const configRef = configReference(env.coconfigPath, env.packagePath);
  const modulePath = getModulePath(configRef);

  const commonCode = `
const configItem = configModule.default || configModule.config || configModule;
const { configuration } = configItem && configItem['${key}'];
const resolved = typeof configuration === 'function' ? configuration() : configuration;
`;

  if (path.extname(filename) === '.ts') {
    // Target is Typescript
    return `${header}
import configModule from '${modulePath}';
${commonCode}
export default resolved;\n`;
  }
  if (path.extname(env.coconfigPath) === '.ts') {
    // Target is JS, source is typescript (requires ts-node)
    return `${header}
require('ts-node').register();
const configModule = require('${modulePath}');
${commonCode}
module.exports = resolved;\n`;
  }
  // Target is JS, source is JS
  return `${header}
const configModule = require('${modulePath}');
${commonCode}
module.exports = resolved;\n`;
}
